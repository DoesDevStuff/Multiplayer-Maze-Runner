#ifndef MAZEPLAYER_H_
#define MAZEPLAYER_H_

#include "common.h"
#include "buffers.h"

//player states - values as below, playerState in MazePlayer holds one of these
extern const int playerState_notConnected;			//not connected
extern const int playerState_calibrationInProgress;	//connected and calibration is in progress
extern const int playerState_accepted;				//broadcast accepted
extern const int playerState_tcpConnected;			//TCP connected
extern const int playerState_inLobby;				//in lobby
extern const int playerState_playing;				//playing
extern const int playerState_Won;					//implicit: game ended
extern const int mazeClientState_Lost;				//implicit: game ended

typedef struct {
	int playerID; //generated by server
	int playerIndex; //index of the player in the player array;
	bool isPlayer; //0=player, 1=chaser - determined by server
	int playerState = 0; //one of the player states above
	int currentX; //current X coordinate
	int currentY; //current Y coordinate
	bool wonOrLost = false;  //0=lost 1=won --- relevant only when currentState is game ended
	SOCKET tcpSocket; //tcp socket of the client when it connects to server via TCP (see currentState above)
	char *tcpReceiveBuffer = NULL;
	bool sendMulticast = false;
	char *multicastSendBuffer = NULL;
} MazePlayer;


#endif /* MAZEPLAYER_H_ */
